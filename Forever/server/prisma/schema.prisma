// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  password     String
  avatar       String?
  role         Role     @default(USER)
  refreshToken String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  //------------Relations-----------
  orders Order[]
  cart   Cart?

  @@index([email])
  @@index([createdAt])
  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  productName String
  description String
  price       Decimal
  image       String?
  sizes       String[]
  inStock     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  //------------Relations-----------
  category     Category @relation(fields: [categoryName], references: [name])
  categoryName String   @map("category")

  subCategory     SubCategory @relation(fields: [subCategoryName], references: [name])
  subCategoryName String      @map("subCategory")

  cartItems CartItem[]

  @@index([price])
  @@index([categoryName, productName])
  @@map("products")
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //------------Relations-----------
  products Product[]

  @@index([name])
  @@map("categories")
}

model SubCategory {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //------------Relations-----------
  products Product[]

  @@index([name])
  @@map("sub_categories")
}

model Order {
  id              String      @id @default(cuid())
  totalAmount     Decimal
  status          OrderStatus @default(PENDING)
  shippingAddress String
  paymentMethod   String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  //------------Relations-----------
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user")

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

model Cart {
  id         String  @id @default(cuid())
  subTotal   Decimal @default(0)
  totalItems Int     @default(0)

  //-----------------Relations-----------------

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique @map("user")

  cartItems CartItem[]

  @@map("carts")
}

model CartItem {
  id       String  @id @default(cuid())
  quantity Int     @default(1)
  price    Decimal
  total    Decimal

  //-----------------------Relations-----------------------

  Cart   Cart?   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId String?

  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?  @map("product")
}

model Otp {
  id        String   @id @default(cuid())
  email     String
  otp       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
